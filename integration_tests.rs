use prime_data::*;

// pi[x] = how many primes are there between 1 and x (inclusive)
// For example, pi[7] = [2, 3, 5, 7].len() = 4
// So pi[PrimePi.input] = PrimePi.output
struct PrimePi {
    input: u64,
    output: u64,
}

const fn pi(input: u64, output: u64) -> PrimePi {
    PrimePi { input, output }
}

const PRIME_PI: [PrimePi; 729] = [
    pi(1, 0), pi(2, 1), pi(3, 2), pi(4, 2), pi(5, 3), pi(6, 3), pi(7, 4), pi(8, 4), pi(9, 4), pi(10, 4), pi(11, 5), pi(12, 5), pi(13, 6), pi(14, 6), pi(15, 6), pi(16, 6), pi(17, 7), pi(18, 7), pi(19, 8), pi(20, 8), pi(21, 8), 
    pi(22, 8), pi(23, 9), pi(24, 9), pi(25, 9), pi(26, 9), pi(27, 9), pi(28, 9), pi(29, 10), pi(30, 10), pi(31, 11), pi(32, 11), pi(33, 11), pi(34, 11), pi(35, 11), pi(36, 11), pi(37, 12), pi(38, 12), pi(39, 12), pi(40, 12), 
    pi(41, 13), pi(42, 13), pi(43, 14), pi(44, 14), pi(45, 14), pi(46, 14), pi(47, 15), pi(48, 15), pi(49, 15), pi(50, 15), pi(51, 15), pi(52, 15), pi(53, 16), pi(54, 16), pi(55, 16), pi(56, 16), pi(57, 16), pi(58, 16), 
    pi(59, 17), pi(60, 17), pi(61, 18), pi(62, 18), pi(63, 18), pi(64, 18), pi(65, 18), pi(66, 18), pi(67, 19), pi(68, 19), pi(69, 19), pi(70, 19), pi(71, 20), pi(72, 20), pi(73, 21), pi(74, 21), pi(75, 21), pi(76, 21), pi(77, 21), 
    pi(78, 21), pi(79, 22), pi(80, 22), pi(81, 22), pi(82, 22), pi(83, 23), pi(84, 23), pi(85, 23), pi(86, 23), pi(87, 23), pi(88, 23), pi(89, 24), pi(90, 24), pi(91, 24), pi(92, 24), pi(93, 24), pi(94, 24), pi(95, 24), pi(96, 24), 
    pi(97, 25), pi(98, 25), pi(99, 25), pi(100, 25), pi(110, 29), pi(120, 30), pi(130, 31), pi(140, 34), pi(150, 35), pi(160, 37), pi(170, 39), pi(180, 41), pi(190, 42), pi(200, 46), pi(210, 46), pi(220, 47), pi(230, 50), 
    pi(240, 52), pi(250, 53), pi(260, 55), pi(270, 57), pi(280, 59), pi(290, 61), pi(300, 62), pi(310, 63), pi(320, 66), pi(330, 66), pi(340, 68), pi(350, 70), pi(360, 72), pi(370, 73), pi(380, 75), pi(390, 77), pi(400, 78), 
    pi(410, 80), pi(420, 81), pi(430, 82), pi(440, 85), pi(450, 87), pi(460, 88), pi(470, 91), pi(480, 92), pi(490, 93), pi(500, 95), pi(510, 97), pi(520, 97), pi(530, 99), pi(540, 99), pi(550, 101), pi(560, 102), pi(570, 104), 
    pi(580, 106), pi(590, 107), pi(600, 109), pi(610, 111), pi(620, 114), pi(630, 114), pi(640, 115), pi(650, 118), pi(660, 120), pi(670, 121), pi(680, 123), pi(690, 124), pi(700, 125), pi(710, 127), pi(720, 128), pi(730, 129), 
    pi(740, 131), pi(750, 132), pi(760, 134), pi(770, 136), pi(780, 137), pi(790, 138), pi(800, 139), pi(810, 140), pi(820, 141), pi(830, 145), pi(840, 146), pi(850, 146), pi(860, 149), pi(870, 150), pi(880, 151), pi(890, 154), 
    pi(900, 154), pi(910, 155), pi(920, 157), pi(930, 158), pi(940, 159), pi(950, 161), pi(960, 162), pi(970, 163), pi(980, 165), pi(990, 166), pi(1000, 168), pi(1100, 184), pi(1200, 196), pi(1300, 211), pi(1400, 222), pi(1500, 239),
    pi(1600, 251), pi(1700, 266), pi(1800, 278), pi(1900, 290), pi(2000, 303), pi(2100, 317), pi(2200, 327), pi(2300, 342), pi(2400, 357), pi(2500, 367), pi(2600, 378), pi(2700, 393), pi(2800, 407), pi(2900, 419), pi(3000, 430), 
    pi(3100, 442), pi(3200, 452), pi(3300, 463), pi(3400, 478), pi(3500, 489), pi(3600, 503), pi(3700, 516), pi(3800, 528), pi(3900, 539), pi(4000, 550), pi(4100, 565), pi(4200, 574), pi(4300, 590), pi(4400, 599), pi(4500, 610), 
    pi(4600, 622), pi(4700, 634), pi(4800, 646), pi(4900, 654), pi(5000, 669), pi(5100, 681), pi(5200, 692), pi(5300, 702), pi(5400, 712), pi(5500, 725), pi(5600, 738), pi(5700, 750), pi(5800, 760), pi(5900, 776), pi(6000, 783), 
    pi(6100, 795), pi(6200, 806), pi(6300, 819), pi(6400, 834), pi(6500, 842), pi(6600, 853), pi(6700, 863), pi(6800, 875), pi(6900, 887), pi(7000, 900), pi(7100, 909), pi(7200, 919), pi(7300, 930), pi(7400, 939), pi(7500, 950), 
    pi(7600, 965), pi(7700, 977), pi(7800, 987), pi(7900, 997), pi(8000, 1007), pi(8100, 1018), pi(8200, 1028), pi(8300, 1042), pi(8400, 1051), pi(8500, 1059), pi(8600, 1071), pi(8700, 1084), pi(8800, 1095), pi(8900, 1108), 
    pi(9000, 1117), pi(9100, 1128), pi(9200, 1140), pi(9300, 1151), pi(9400, 1162), pi(9500, 1177), pi(9600, 1184), pi(9700, 1197), pi(9800, 1208), pi(9900, 1220), pi(10000, 1229), pi(11000, 1335), pi(12000, 1438), pi(13000, 1547), 
    pi(14000, 1652), pi(15000, 1754), pi(16000, 1862), pi(17000, 1960), pi(18000, 2064), pi(19000, 2158), pi(20000, 2262), pi(21000, 2360), pi(22000, 2464), pi(23000, 2564), pi(24000, 2668), pi(25000, 2762), pi(26000, 2860), 
    pi(27000, 2961), pi(28000, 3055), pi(29000, 3153), pi(30000, 3245), pi(31000, 3340), pi(32000, 3432), pi(33000, 3538), pi(34000, 3638), pi(35000, 3732), pi(36000, 3824), pi(37000, 3923), pi(38000, 4017), pi(39000, 4107), 
    pi(40000, 4203), pi(41000, 4291), pi(42000, 4392), pi(43000, 4494), pi(44000, 4579), pi(45000, 4675), pi(46000, 4761), pi(47000, 4851), pi(48000, 4946), pi(49000, 5035), pi(50000, 5133), pi(51000, 5222), pi(52000, 5319), 
    pi(53000, 5408), pi(54000, 5500), pi(55000, 5590), pi(56000, 5683), pi(57000, 5782), pi(58000, 5873), pi(59000, 5963), pi(60000, 6057), pi(61000, 6145), pi(62000, 6232), pi(63000, 6320), pi(64000, 6413), pi(65000, 6493), 
    pi(66000, 6591), pi(67000, 6675), pi(68000, 6774), pi(69000, 6854), pi(70000, 6935), pi(71000, 7033), pi(72000, 7128), pi(73000, 7218), pi(74000, 7301), pi(75000, 7393), pi(76000, 7484), pi(77000, 7567), pi(78000, 7662), 
    pi(79000, 7746), pi(80000, 7837), pi(81000, 7925), pi(82000, 8017), pi(83000, 8106), pi(84000, 8190), pi(85000, 8277), pi(86000, 8362), pi(87000, 8450), pi(88000, 8543), pi(89000, 8619), pi(90000, 8713), pi(91000, 8802), 
    pi(92000, 8887), pi(93000, 8984), pi(94000, 9070), pi(95000, 9157), pi(96000, 9252), pi(97000, 9336), pi(98000, 9418), pi(99000, 9505), pi(100000, 9592), pi(110000, 10453), pi(120000, 11301), pi(130000, 12159), pi(140000, 13010),
    pi(150000, 13848), pi(160000, 14683), pi(170000, 15497), pi(180000, 16342), pi(190000, 17170), pi(200000, 17984), pi(210000, 18807), pi(220000, 19618), pi(230000, 20437), pi(240000, 21221), pi(250000, 22044), pi(260000, 22837), 
    pi(270000, 23642), pi(280000, 24432), pi(290000, 25224), pi(300000, 25997), pi(310000, 26800), pi(320000, 27608), pi(330000, 28404), pi(340000, 29182), pi(350000, 29977), pi(360000, 30757), pi(370000, 31522), pi(380000, 32300), 
    pi(390000, 33067), pi(400000, 33860), pi(410000, 34614), pi(420000, 35390), pi(430000, 36162), pi(440000, 36941), pi(450000, 37706), pi(460000, 38458), pi(470000, 39223), pi(480000, 40005), pi(490000, 40766), pi(500000, 41538), 
    pi(510000, 42291), pi(520000, 43061), pi(530000, 43825), pi(540000, 44572), pi(550000, 45322), pi(560000, 46072), pi(570000, 46819), pi(580000, 47588), pi(590000, 48351), pi(600000, 49098), pi(610000, 49861), pi(620000, 50612), 
    pi(630000, 51341), pi(640000, 52074), pi(650000, 52831), pi(660000, 53564), pi(670000, 54309), pi(680000, 55063), pi(690000, 55815), pi(700000, 56543), pi(710000, 57306), pi(720000, 58029), pi(730000, 58789), pi(740000, 59531), 
    pi(750000, 60238), pi(760000, 60978), pi(770000, 61733), pi(780000, 62468), pi(790000, 63206), pi(800000, 63951), pi(810000, 64683), pi(820000, 65416), pi(830000, 66161), pi(840000, 66890), pi(850000, 67617), pi(860000, 68342), 
    pi(870000, 69095), pi(880000, 69823), pi(890000, 70555), pi(900000, 71274), pi(910000, 72026), pi(920000, 72734), pi(930000, 73474), pi(940000, 74187), pi(950000, 74907), pi(960000, 75618), pi(970000, 76350), pi(980000, 77067), 
    pi(990000, 77777), pi(1000000, 78498), pi(1100000, 85714), pi(1200000, 92938), pi(1300000, 100021), pi(1400000, 107126), pi(1500000, 114155), pi(1600000, 121127), pi(1700000, 128141), pi(1800000, 135072), pi(1900000, 142029), 
    pi(2000000, 148933), pi(2100000, 155805), pi(2200000, 162662), pi(2300000, 169511), pi(2400000, 176302), pi(2500000, 183072), pi(2600000, 189880), pi(2700000, 196645), pi(2800000, 203362), pi(2900000, 210109), 
    pi(3000000, 216816), pi(3100000, 223492), pi(3200000, 230209), pi(3300000, 236900), pi(3400000, 243539), pi(3500000, 250150), pi(3600000, 256726), pi(3700000, 263397), pi(3800000, 269987), pi(3900000, 276611), 
    pi(4000000, 283146), pi(4100000, 289774), pi(4200000, 296314), pi(4300000, 302824), pi(4400000, 309335), pi(4500000, 315948), pi(4600000, 322441), pi(4700000, 328964), pi(4800000, 335439), pi(4900000, 341992), 
    pi(5000000, 348513), pi(5100000, 354971), pi(5200000, 361407), pi(5300000, 367900), pi(5400000, 374362), pi(5500000, 380800), pi(5600000, 387202), pi(5700000, 393606), pi(5800000, 399993), pi(5900000, 406429), 
    pi(6000000, 412849), pi(6100000, 419246), pi(6200000, 425648), pi(6300000, 432073), pi(6400000, 438410), pi(6500000, 444757), pi(6600000, 451159), pi(6700000, 457497), pi(6800000, 463872), pi(6900000, 470283), 
    pi(7000000, 476648), pi(7100000, 483015), pi(7200000, 489319), pi(7300000, 495666), pi(7400000, 501962), pi(7500000, 508261), pi(7600000, 514565), pi(7700000, 520910), pi(7800000, 527154), pi(7900000, 533506), 
    pi(8000000, 539777), pi(8100000, 546024), pi(8200000, 552319), pi(8300000, 558597), pi(8400000, 564877), pi(8500000, 571119), pi(8600000, 577439), pi(8700000, 583714), pi(8800000, 590006), pi(8900000, 596222), 
    pi(9000000, 602489), pi(9100000, 608672), pi(9200000, 614917), pi(9300000, 621177), pi(9400000, 627400), pi(9500000, 633578), pi(9600000, 639851), pi(9700000, 646054), pi(9800000, 652265), pi(9900000, 658445), 
    pi(10000000, 664579), pi(11000000, 726517), pi(12000000, 788060), pi(13000000, 849252), pi(14000000, 910077), pi(15000000, 970704), pi(16000000, 1031130), pi(17000000, 1091314), pi(18000000, 1151367), pi(19000000, 1211050), 
    pi(20000000, 1270607), pi(21000000, 1329943), pi(22000000, 1389261), pi(23000000, 1448221), pi(24000000, 1507122), pi(25000000, 1565927), pi(26000000, 1624527), pi(27000000, 1683065), pi(28000000, 1741430), pi(29000000, 1799676), 
    pi(30000000, 1857859), pi(31000000, 1915979), pi(32000000, 1973815), pi(33000000, 2031667), pi(34000000, 2089379), pi(35000000, 2146775), pi(36000000, 2204262), pi(37000000, 2261623), pi(38000000, 2318966), pi(39000000, 2376402), 
    pi(40000000, 2433654), pi(41000000, 2490756), pi(42000000, 2547620), pi(43000000, 2604535), pi(44000000, 2661384), pi(45000000, 2718160), pi(46000000, 2775053), pi(47000000, 2831693), pi(48000000, 2888144), pi(49000000, 2944531), 
    pi(50000000, 3001134), pi(51000000, 3057494), pi(52000000, 3113843), pi(53000000, 3170052), pi(54000000, 3226203), pi(55000000, 3282200), pi(56000000, 3338330), pi(57000000, 3394435), pi(58000000, 3450336), pi(59000000, 3506314), 
    pi(60000000, 3562115), pi(61000000, 3618045), pi(62000000, 3673600), pi(63000000, 3729306), pi(64000000, 3785086), pi(65000000, 3840554), pi(66000000, 3896123), pi(67000000, 3951767), pi(68000000, 4007342), pi(69000000, 4062674), 
    pi(70000000, 4118064), pi(71000000, 4173373), pi(72000000, 4228658), pi(73000000, 4284089), pi(74000000, 4339254), pi(75000000, 4394304), pi(76000000, 4449611), pi(77000000, 4504535), pi(78000000, 4559544), pi(79000000, 4614444), 
    pi(80000000, 4669382), pi(81000000, 4724409), pi(82000000, 4779430), pi(83000000, 4834317), pi(84000000, 4889139), pi(85000000, 4943731), pi(86000000, 4998470), pi(87000000, 5053180), pi(88000000, 5107832), pi(89000000, 5162565), 
    pi(90000000, 5216954), pi(91000000, 5271659), pi(92000000, 5326237), pi(93000000, 5380681), pi(94000000, 5435104), pi(95000000, 5489749), pi(96000000, 5544201), pi(97000000, 5598565), pi(98000000, 5652996), pi(99000000, 5707123), 
    pi(100000000, 5761455), pi(110000000, 6303309), pi(120000000, 6841648), pi(130000000, 7378187), pi(140000000, 7912199), pi(150000000, 8444396), pi(160000000, 8974458), pi(170000000, 9503083), pi(180000000, 10030385), 
    pi(190000000, 10555473), pi(200000000, 11078937), pi(210000000, 11601626), pi(220000000, 12122540), pi(230000000, 12642573), pi(240000000, 13161544), pi(250000000, 13679318), pi(260000000, 14195860), pi(270000000, 14711384), 
    pi(280000000, 15226069), pi(290000000, 15739663), pi(300000000, 16252325), pi(310000000, 16764521), pi(320000000, 17275206), pi(330000000, 17785475), pi(340000000, 18294605), pi(350000000, 18803526), pi(360000000, 19311288), 
    pi(370000000, 19818405), pi(380000000, 20325373), pi(390000000, 20831210), pi(400000000, 21336326), pi(410000000, 21840713), pi(420000000, 22344479), pi(430000000, 22848050), pi(440000000, 23350555), pi(450000000, 23853038), 
    pi(460000000, 24354548), pi(470000000, 24855718), pi(480000000, 25356424), pi(490000000, 25856368), pi(500000000, 26355867), pi(510000000, 26854252), pi(520000000, 27352687), pi(530000000, 27850698), pi(540000000, 28348381), 
    pi(550000000, 28845356), pi(560000000, 29342150), pi(570000000, 29838286), pi(580000000, 30334175), pi(590000000, 30829544), pi(600000000, 31324703), pi(610000000, 31819444), pi(620000000, 32313388), pi(630000000, 32807229), 
    pi(640000000, 33300450), pi(650000000, 33793395), pi(660000000, 34286170), pi(670000000, 34778319), pi(680000000, 35270167), pi(690000000, 35761747), pi(700000000, 36252931), pi(710000000, 36743905), pi(720000000, 37234048), 
    pi(730000000, 37724170), pi(740000000, 38213987), pi(750000000, 38703181), pi(760000000, 39192219), pi(770000000, 39680979), pi(780000000, 40169476), pi(790000000, 40658253), pi(800000000, 41146179), pi(810000000, 41634187), 
    pi(820000000, 42121502), pi(830000000, 42608404), pi(840000000, 43095410), pi(850000000, 43581966), pi(860000000, 44067840), pi(870000000, 44553888), pi(880000000, 45039361), pi(890000000, 45524412), pi(900000000, 46009215), 
    pi(910000000, 46494557), pi(920000000, 46979583), pi(930000000, 47463433), pi(940000000, 47947424), pi(950000000, 48431471), pi(960000000, 48915316), pi(970000000, 49398798), pi(980000000, 49881580), pi(990000000, 50364709), 
];

const RANGE_INPUT: [u64; 31] = [0, 1, 4, 6, 12, 16, 25, 28, 30, 44, 50, 60, 66, 80, 91, 110, 130, 158, 162, 183, 210, 252, 306, 348, 396, 450, 497, 540, 667, 728, 900];
const RANGE_PI: [[u64; 31]; 31] = [
    [0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,  0], 
    [0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,  0], 
    [2,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,  0], 
    [3,   3,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,  0], 
    [5,   5,   3,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,  0], 
    [6,   6,   4,   3,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,  0], 
    [9,   9,   7,   6,   4,   3,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,  0], 
    [9,   9,   7,   6,   4,   3,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,  0], 
    [10,  10,  8,   7,   5,   4,   1,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,  0], 
    [14,  14,  12,  11,  9,   8,   5,   5,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,  0], 
    [15,  15,  13,  12,  10,  9,   6,   6,   5,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,  0], 
    [17,  17,  15,  14,  12,  11,  8,   8,   7,   3,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,  0], 
    [18,  18,  16,  15,  13,  12,  9,   9,   8,   4,   3,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,  0], 
    [22,  22,  20,  19,  17,  16,  13,  13,  12,  8,   7,   5,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,  0], 
    [24,  24,  22,  21,  19,  18,  15,  15,  14,  10,  9,   7,   6,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,  0], 
    [29,  29,  27,  26,  24,  23,  20,  20,  19,  15,  14,  12,  11,  7,   5,   0,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,  0], 
    [31,  31,  29,  28,  26,  25,  22,  22,  21,  17,  16,  14,  13,  9,   7,   2,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,  0], 
    [37,  37,  35,  34,  32,  31,  28,  28,  27,  23,  22,  20,  19,  15,  13,  8,   6,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,  0], 
    [37,  37,  35,  34,  32,  31,  28,  28,  27,  23,  22,  20,  19,  15,  13,  8,   6,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,  0], 
    [42,  42,  40,  39,  37,  36,  33,  33,  32,  28,  27,  25,  24,  20,  18,  13,  11,  5,   5,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,  0], 
    [46,  46,  44,  43,  41,  40,  37,  37,  36,  32,  31,  29,  28,  24,  22,  17,  15,  9,   9,   4,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,  0], 
    [54,  54,  52,  51,  49,  48,  45,  45,  44,  40,  39,  37,  36,  32,  30,  25,  23,  17,  17,  12,  8,   0,   0,  0,  0,  0,  0,  0,  0,  0,  0], 
    [62,  62,  60,  59,  57,  56,  53,  53,  52,  48,  47,  45,  44,  40,  38,  33,  31,  25,  25,  20,  16,  8,   0,  0,  0,  0,  0,  0,  0,  0,  0], 
    [69,  69,  67,  66,  64,  63,  60,  60,  59,  55,  54,  52,  51,  47,  45,  40,  38,  32,  32,  27,  23,  15,  7,  0,  0,  0,  0,  0,  0,  0,  0], 
    [77,  77,  75,  74,  72,  71,  68,  68,  67,  63,  62,  60,  59,  55,  53,  48,  46,  40,  40,  35,  31,  23,  15, 8,  0,  0,  0,  0,  0,  0,  0], 
    [87,  87,  85,  84,  82,  81,  78,  78,  77,  73,  72,  70,  69,  65,  63,  58,  56,  50,  50,  45,  41,  33,  25, 18, 10, 0,  0,  0,  0,  0,  0], 
    [94,  94,  92,  91,  89,  88,  85,  85,  84,  80,  79,  77,  76,  72,  70,  65,  63,  57,  57,  52,  48,  40,  32, 25, 17, 7,  0,  0,  0,  0,  0], 
    [99,  99,  97,  96,  94,  93,  90,  90,  89,  85,  84,  82,  81,  77,  75,  70,  68,  62,  62,  57,  53,  45,  37, 30, 22, 12, 5,  0,  0,  0,  0], 
    [121, 121, 119, 118, 116, 115, 112, 112, 111, 107, 106, 104, 103, 99,  97,  92,  90,  84,  84,  79,  75,  67,  59, 52, 44, 34, 27, 22, 0,  0,  0], 
    [129, 129, 127, 126, 124, 123, 120, 120, 119, 115, 114, 112, 111, 107, 105, 100, 98,  92,  92,  87,  83,  75,  67, 60, 52, 42, 35, 30, 8,  0,  0], 
    [154, 154, 152, 151, 149, 148, 145, 145, 144, 140, 139, 137, 136, 132, 130, 125, 123, 117, 117, 112, 108, 100, 92, 85, 77, 67, 60, 55, 33, 25, 0], 
];

#[test]
#[ignore]
fn prime_iter_collect_size() {

    let starter = PrimeData::new();
    let mid = starter.expand(0..=900).unwrap();
    let expanded = mid.expand(0..=50_000).unwrap();

    for pi in PRIME_PI.iter() {
        let (input, output) = (pi.input, pi.output);

        if input > 5_000_000 { break }

        let prime_data = expanded.expand(0..=input).unwrap();
        let count = prime_data.iter_all().count() as u64;

        assert_eq!(output, count);
    }
}

// this test took 45 seconds to run
#[test]
#[ignore]
fn prime_count() {

    let starter = PrimeData::new();
    let mid = starter.expand(0..=900).unwrap();
    let expanded = mid.expand(0..=50_000).unwrap();

    for pi in PRIME_PI.iter() {
        let (input, output) = (pi.input, pi.output);

        if input > 10_000_000 { break }

        let prime_data = expanded.expand(0..=input).unwrap();
        let count = prime_data.count_primes_in_range(0..=input).unwrap();

        assert_eq!(output, count);
    }
}

fn _prime_count_offsetted() {

    let starter = PrimeData::new();
    let mid = starter.expand(0..=900).unwrap();
    let expanded = mid.expand(0..=50_000).unwrap();

    for (offset, off_count) in [(17u64, 7u64), (58, 16), (59, 17), (155, 36)].iter() {
        for pi in PRIME_PI.iter() {
            let (input, output) = (pi.input, pi.output);
    
            if input < 20_000_000 { continue }
            if input > 50_000_000 { break }
    
            let prime_data = expanded.expand((offset + 1)..=input).unwrap();
            let count = prime_data.count_primes_in_range((offset + 1)..=input).unwrap();
    
            assert_eq!(output - off_count, count);
        }
    }
}

#[test]
fn range_count() {

    let data = PrimeData::new().expand(0..=900).unwrap();

    for (si, &range_start) in RANGE_INPUT.iter().enumerate() {
        for (ei, &range_end) in RANGE_INPUT.iter().enumerate() {
            let count = data.count_primes_in_range(range_start..=range_end).unwrap();
            let expected = RANGE_PI[ei][si];

            println!("{} {} {} {}", ei, si, count, expected);

            assert_eq!(count, expected);
        }
    }
}